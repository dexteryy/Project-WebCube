import { createStore, combineReducers, applyMiddleware, compose } from 'redux';

// https://www.npmjs.com/package/redux-thunk
import thunkMiddleware from 'redux-thunk';
// https://www.npmjs.com/package/redux-debounced
import createDebounce from 'redux-debounced';
// https://www.npmjs.com/package/redux-promise-middleware
import { createPromise } from 'redux-promise-middleware';
// https://www.npmjs.com/package/redux-observable
import { combineEpics, createEpicMiddleware } from 'redux-observable';
import thunkPayloadMiddleware from '../middlewares/thunkPayload';
import { combineReducersWith } from '../utils';

let isProdEnv = true;
try {
  if (process.env.NODE_ENV !== 'production') {
    isProdEnv = false;
  }
} catch (ex) {}
const isSsrEnv = typeof location !== 'object';
const isDevToolsDisabled = isProdEnv || isSsrEnv;
let freezeMiddleware, logger, createLogger;
/* eslint-disable no-undef */
if (!isDevToolsDisabled) {
  // https://github.com/leoasis/redux-immutable-state-invariant
  freezeMiddleware = require('redux-immutable-state-invariant').default();
  // https://www.npmjs.com/package/redux-logger
  const reduxLogger = require('redux-logger');
  logger = reduxLogger.default;
  ({ createLogger } = reduxLogger);
}
/* eslint-enable no-undef */

export default function appState({
  // https://redux.js.org/docs/recipes/reducers/UsingCombineReducers.html
  // https://redux.js.org/docs/recipes/reducers/ReusingReducerLogic.html
  reducers,
  // optional
  // https://redux-observable.js.org/docs/basics/Epics.html
  epics = [],
  // optional
  disableDevTools = false,
  // optional
  // https://github.com/zalmoxisus/redux-devtools-extension/blob/master/docs/API/Arguments.md
  devToolsOptions = {},
  // optional
  disableFreezeState = false,
  // optional
  // https://www.npmjs.com/package/redux-logger#options
  loggerConfig = null,
  // https://github.com/pburtchaell/redux-promise-middleware/blob/4843291da348fc8ed633c41e6afbc796f7152cc6/src/index.js#L14
  promiseMiddlewareConfig = {},
  // optional
  // https://redux.js.org/docs/recipes/reducers/InitializingState.html
  preloadedState = (typeof window !== 'undefined' &&
    window._webcubeInitialState) ||
    {},
  // optional
  // https://redux.js.org/docs/advanced/Middleware.html
  // https://redux.js.org/docs/api/applyMiddleware.html
  middlewares = [],
  // optional
  priorMiddlewares = [],
  // optional
  // https://redux.js.org/docs/Glossary.html#store-enhancer
  enhancers = [],
  // optional
  priorEnhancers = [],
  storeListeners = [],
  ...autoGenerated
}) {
  const {
    // withRouter
    _enableRouter = false,
    _connectRouter,
    _routerMiddleware,
    _routerHistory,
    // withPersist
    _enablePersist = false,
    _persistStore,
    _persistReducer,
    persistStorage,
    persistKey,
    persistConfig,
    // withImmutable
    _enableImmutable = false,
    _immutableCombineReducers,
    _initImmutableState,
  } = autoGenerated;
  if (_enableImmutable && _persistStore) {
    throw new Error(
      `[redux-cube] Wrong appState settings. \`enablePersist: true\` conflicts with \`withImmutable\``,
    );
  }
  let rootReducer;
  const reducersWithRouter =
    _enableRouter && !_enableImmutable // @TODO https://github.com/supasate/connected-react-router/blob/master/FAQ.md#how-to-support-immutablejs
      ? {
          router: _connectRouter(_routerHistory),
        }
      : {};
  if (reducers && Object.keys(reducers).length) {
    Object.assign(reducersWithRouter, reducers);
    if (_enableImmutable) {
      // https://www.npmjs.com/package/redux-immutable
      // https://redux.js.org/docs/recipes/UsingImmutableJS.html#make-your-entire-redux-state-tree-an-immutablejs-object
      rootReducer = combineReducersWith(
        _immutableCombineReducers,
        reducersWithRouter,
      );
    } else {
      rootReducer = combineReducersWith(combineReducers, reducersWithRouter);
    }
  } else {
    rootReducer = combineReducersWith(combineReducers, reducersWithRouter);
  }
  if (!isSsrEnv && _enablePersist) {
    // https://github.com/rt2zz/redux-persist#usage
    rootReducer = _persistReducer(
      Object.assign({}, persistConfig, {
        key: persistKey,
        storage: persistStorage,
      }),
      rootReducer,
    );
  }
  const epicMiddleware = createEpicMiddleware();
  // https://redux.js.org/docs/api/applyMiddleware.html
  const middlewaresToApply = [
    ...priorMiddlewares,
    // https://www.npmjs.com/package/redux-thunk#injecting-a-custom-argument
    // https://github.com/gaearon/redux-thunk/blob/master/src/index.js
    thunkMiddleware,
    thunkPayloadMiddleware(),
    createDebounce(),
    // https://github.com/pburtchaell/redux-promise-middleware/blob/4c6282e54c41034591d8925fe29457b472b04e69/docs/introduction.md
    // https://github.com/pburtchaell/redux-promise-middleware/blob/4c6282e54c41034591d8925fe29457b472b04e69/docs/guides/custom-suffixes.md
    // https://github.com/pburtchaell/redux-promise-middleware/blob/4c6282e54c41034591d8925fe29457b472b04e69/docs/guides/custom-separators.md
    // https://github.com/pburtchaell/redux-promise-middleware/blob/master/src/index.js
    createPromise(promiseMiddlewareConfig),
    // https://redux-observable.js.org/docs/basics/SettingUpTheMiddleware.html
    epicMiddleware,
    ...middlewares,
  ]
    .concat(
      isDevToolsDisabled || disableFreezeState
        ? []
        : [
            // https://github.com/leoasis/redux-immutable-state-invariant#immutablestateinvariantmiddleware-isimmutable-ignore-
            freezeMiddleware,
          ],
    )
    .concat(
      _enableRouter
        ? [
            // https://github.com/reacttraining/react-router/tree/master/packages/react-router-redux#usage
            // https://github.com/reactjs/react-router-redux#what-if-i-want-to-issue-navigation-events-via-redux-actions
            _routerMiddleware(_routerHistory),
          ]
        : [],
    )
    .concat(
      isDevToolsDisabled
        ? []
        : [
            // https://www.npmjs.com/package/redux-logger
            // logger must be the last middleware in chain
            loggerConfig ? createLogger(loggerConfig) : logger,
          ],
    );
  // https://redux.js.org/docs/api/compose.html
  // https://github.com/zalmoxisus/redux-devtools-extension#12-advanced-store-setup
  const composeEnhancers =
    !disableDevTools &&
    typeof window === 'object' &&
    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__
      ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__(devToolsOptions)
      : compose;
  const allEnhancers = composeEnhancers(
    ...priorEnhancers,
    applyMiddleware(...middlewaresToApply),
    ...enhancers,
  );
  let initialState = preloadedState;
  if (_enableImmutable) {
    initialState = _initImmutableState(initialState);
  }
  const res = {};
  // https://redux.js.org/docs/api/createStore.html
  // https://redux.js.org/docs/api/Store.html
  res.store = createStore(rootReducer, initialState, allEnhancers);
  if (!isSsrEnv && _enablePersist) {
    // https://github.com/rt2zz/redux-persist#usage
    res.persistor = _persistStore(res.store);
  }
  storeListeners.forEach(listener => {
    listener(res.store);
  });
  // https://redux-observable.js.org/docs/basics/SettingUpTheMiddleware.html
  epicMiddleware.run(combineEpics(...epics));
  return res;
}
